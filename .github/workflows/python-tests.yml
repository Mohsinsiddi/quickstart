name: Quickstart Tests
on:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        agent: ${{ fromJson(needs.get-agents.outputs.agent_names) }}
      fail-fast: false
    needs: get-agents
    env:
      GNOSIS_RPC_URL: ${{ secrets.GNOSIS_RPC_URL }}
      MODIUS_RPC_URL: ${{ secrets.MODIUS_RPC_URL }}
      OPTIMISM_RPC_URL: ${{ secrets.OPTIMISM_RPC_URL }}
      BASE_RPC_URL: ${{ secrets.BASE_RPC_URL }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      DOCKER_LOGS_DIR: ${GITHUB_WORKSPACE}/logs
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Set up Docker
      run: |
        # Stop and remove existing Docker installations
        sudo systemctl stop docker || true
        sudo systemctl stop docker.socket || true
        
        # Clean existing installations
        sudo apt-get remove -y docker docker-engine docker.io containerd runc
        sudo apt-get update
        
        # Install prerequisites
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg \
          lsb-release

        # Add Docker's GPG key
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        
        # Add Docker repository
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        # Install Docker
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        
        # Get current user info
        CURRENT_USER=$(id -u)
        CURRENT_GROUP=$(id -g)
        
        # Start Docker service
        sudo systemctl start docker
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git jq
        
    - name: Clean Python cache
      run: |
        sudo rm -rf ~/.cache/pip
        sudo rm -rf ~/.cache/poetry
        sudo rm -rf .pytest_cache
        sudo rm -rf .venv
        sudo rm -rf poetry.lock
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Create .env file
      run: |
        echo "GNOSIS_RPC_URL=${GNOSIS_RPC_URL}" > .env
        echo "MODIUS_RPC_URL=${MODIUS_RPC_URL}" >> .env
        echo "OPTIMISM_RPC_URL=${OPTIMISM_RPC_URL}" >> .env
        echo "BASE_RPC_URL=${BASE_RPC_URL}" >> .env
        echo "TEST_PASSWORD=${TEST_PASSWORD}" >> .env
        echo "DOCKER_LOGS_DIR=${DOCKER_LOGS_DIR}" >> .env
        
    - name: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        poetry env use python3.10
        poetry install --no-interaction

    - name: Run test
      run: |
        # Extract agent name from config file and run specific test
        poetry run pytest -v tests/test_run_service.py -s --log-cli-level=INFO -k ${{ matrix.agent }} 2>&1 | tee ${DOCKER_LOGS_DIR}/${{ matrix.agent }}.log

    - name: Debug container failure
      if: failure()
      run: |
        echo "==== Docker container status for ${{ matrix.agent }} ====" >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
        docker ps -a >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
        
        echo "==== Container logs for ${{ matrix.agent }} ====" >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
        for container in $(docker ps -aq); do
          echo "=== Logs for $container ===" >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
          docker logs $container >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
          
          echo "=== Inspect for $container ===" >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
          docker inspect $container >> ${DOCKER_LOGS_DIR}/${{ matrix.agent }}_debug.log
        done

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-${{ matrix.agent }}
        path: |
          logs/
          /logs/
          .env
        retention-days: 30

  # Job to discover agents from config files
  get-agents:
    runs-on: ubuntu-latest
    outputs:
      agent_names: ${{ steps.find-agents.outputs.names }}
    steps:
      - uses: actions/checkout@v4
      - id: find-agents
        run: |
          # Find all config files and extract agent names
          NAMES=$(ls configs/config_*.json | sed 's/configs\/config_//' | sed 's/\.json//' | jq -R -s -c 'split("\n")[:-1]')
          echo "Found agents: $NAMES"
          echo "names=$NAMES" >> $GITHUB_OUTPUT